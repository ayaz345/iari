import json
import logging
from unittest import TestCase

from flask import Flask
from flask_restful import Api  # type: ignore

from src import console
from src.models.api.get_article_statistics import GetArticleStatistics
from src.models.api.get_article_statistics.article_statistics import ArticleStatistics

logger = logging.getLogger(__name__)

# This is needed to get the full diff when tests fail
# https://stackoverflow.com/questions/14493670/how-to-set-self-maxdiff-in-nose-to-get-full-diff-output
TestCase.maxDiff = None


class TestGetArticleStatistics(TestCase):
    """Generated by ChatGPT using this prompt:
        Create a test for this flask api endpoint
    import logging
    from typing import Optional

    from flask import request
    from flask_restful import Resource, abort  # type: ignore

    from src.helpers.console import console
    from src.models.api.get_statistics_schema import GetStatisticsSchema
    from src.models.api.job import Job
    from src.models.wikimedia.enums import AnalyzerReturn
    from src.models.wikimedia.wikipedia.analyzer import WikipediaAnalyzer

    logger = logging.getLogger(__name__)


    class GetArticleStatistics(Resource):
        schema = GetStatisticsSchema()
        job: Optional[Job]

        def get(self):
            self.__validate_and_get_job__()
            if self.job.lang.lower() == "en" and self.job.title and self.job.site.lower() == "wikipedia":
                logger.info(f"Analyzing {self.job.title}...")
                # TODO use a work queue here like ReFill so
                #  we can easily scale the workload from thousands of users
                wikipedia_analyzer = WikipediaAnalyzer(title=self.job.title,
                                                       lang=self.job.lang,
                                                       wikimedia_site=self.job.site,
                                                       testing=self.job.testing)
                statistics = wikipedia_analyzer.get_article_statistics()
                if self.job.testing:
                    # what is the purpose of this?
                    return "ok", 200
                else:
                    if isinstance(statistics, dict):
                        # we got a json response
                        # according to https://stackoverflow.com/questions/13081532/return-json-response-from-flask-view
                        # flask calls jsonify automatically
                        return statistics, 200
                    elif statistics == AnalyzerReturn.NOT_FOUND:
                        return statistics.value, 404
                    elif statistics == AnalyzerReturn.IS_REDIRECT:
                        return statistics.value, 400
                    else:
                        raise Exception("this should never be reached.")

            else:
                # Something was not valid, return a meaningful error
                logger.error("did not get what we need")
                if self.job.lang != "en":
                    return "Only en language code is supported", 400
                if self.job.title == "":
                    return "Title was missing", 400
                if self.job.site != "wikipedia":
                    return "Only 'wikipedia' site is supported", 400

        def __validate_and_get_job__(self):
            self.__validate__()
            self.__parse_into_job__()

        def __validate__(self):
            print(request.args)
            errors = self.schema.validate(request.args)
            if errors:
                abort(400, error=str(errors))

        def __parse_into_job__(self):
            console.print(request.args)
            self.job = self.schema.load(request.args)
            console.print(self.job.dict())

    from marshmallow import Schema, fields, post_load

    from src.models.api.job import Job


    class GetStatisticsSchema(Schema):
        lang = fields.Str(required=True)
        site = fields.Str(required=True)
        testing = fields.Bool(required=False)
        title = fields.Str(required=True)

        # noinspection PyUnusedLocal
        @post_load
        # **kwargs is needed here despite what the validator claims
        def return_object(self, data, **kwargs):  # type: ignore
            return Job(**data)
    """

    def setUp(self):
        app = Flask(__name__)
        api = Api(app)

        api.add_resource(GetArticleStatistics, "/get-statistics")
        app.testing = True
        self.test_client = app.test_client()

    def test_valid_request_test(self):
        response = self.test_client.get(
            "/get-statistics?lang=en&site=wikipedia&title=Test&testing=True"
        )
        data = json.loads(response.data)
        print(response.data)
        self.assertEqual(200, response.status_code)
        self.assertEqual(
            ArticleStatistics(title="Test", page_id=0).dict(),
            ArticleStatistics(**self.__make_reproducible__(data=data)).dict(),
        )

    # DISABLED because it takes forever
    # def test_valid_request_gnu_linux_naming_controversy(self):
    #     response = self.test_client.get(
    #         "get-statistics?lang=en&site=wikipedia&title=GNU/Linux_naming_controversy"
    #     )
    #     logger.debug(response.data)
    #     # data = json.loads(response.data)
    #     self.assertEqual(200, response.status_code)

    def test_valid_request_easter_island(self):
        response = self.test_client.get(
            "/get-statistics?lang=en&site=wikipedia&title=Easter Island&testing=True"
        )
        data = json.loads(response.data)
        console.print(ArticleStatistics(**data).dict())
        self.assertEqual(200, response.status_code)
        self.assertEqual(
            {
                "has_references": True,
                "lang": "en",
                "page_id": 0,
                "references": {
                    "all": 5,
                    "details": [
                        {
                            "bare_url_template_found": False,
                            "citation_template_found": False,
                            "citeq_template_found": False,
                            "cs1_template_found": True,
                            "is_citation_reference": True,
                            "is_general_reference": False,
                            "is_named_reference": False,
                            "isbn_template_found": False,
                            "multiple_templates_found": False,
                            "plain_text_in_reference": False,
                            "url_template_found": False,
                            "wikitext": '<ref name="INE">{{cite web | url= '
                            "http://www.ine.cl/canales/chile_estadistico/censos_poblacion_vivienda/censo_pobl_vivi.php "
                            "| title= Censo de Poblaci√≥n y "
                            "Vivienda 2002 | work= [[National "
                            "Statistics Institute "
                            "(Chile)|National Statistics "
                            "Institute]] | access-date= 1 May "
                            "2010 | url-status=live | "
                            "archive-url= "
                            "https://web.archive.org/web/20100715195638/http://www.ine.cl/canales"
                            "/chile_estadistico/censos_poblacion_vivienda/censo_pobl_vivi.php "
                            "| archive-date= 15 July "
                            "2010}}</ref>",
                        },
                        {
                            "bare_url_template_found": False,
                            "citation_template_found": False,
                            "citeq_template_found": False,
                            "cs1_template_found": True,
                            "is_citation_reference": True,
                            "is_general_reference": False,
                            "is_named_reference": False,
                            "isbn_template_found": False,
                            "multiple_templates_found": False,
                            "plain_text_in_reference": False,
                            "url_template_found": False,
                            "wikitext": "<ref>{{cite web |language= es |url= "
                            "https://resultados.censo2017.cl/Home/Download "
                            "|title= Censo 2017 |work= [[National "
                            "Statistics Institute "
                            "(Chile)|National Statistics "
                            "Institute]] |access-date= 11 May "
                            "2018 |archive-url= "
                            "https://web.archive.org/web/20180511145942/https://resultados.censo2017.cl/Home/Download "
                            "|archive-date= 11 May 2018 "
                            "|url-status=dead }}</ref>",
                        },
                        {
                            "bare_url_template_found": False,
                            "citation_template_found": False,
                            "citeq_template_found": False,
                            "cs1_template_found": False,
                            "is_citation_reference": True,
                            "is_general_reference": False,
                            "is_named_reference": True,
                            "isbn_template_found": False,
                            "multiple_templates_found": False,
                            "plain_text_in_reference": False,
                            "url_template_found": False,
                            "wikitext": '<ref name="INE"/>',
                        },
                        {
                            "bare_url_template_found": False,
                            "citation_template_found": False,
                            "citeq_template_found": False,
                            "cs1_template_found": True,
                            "is_citation_reference": False,
                            "is_general_reference": True,
                            "is_named_reference": False,
                            "isbn_template_found": False,
                            "multiple_templates_found": False,
                            "plain_text_in_reference": False,
                            "url_template_found": False,
                            "wikitext": "* {{cite book|author-link=Jared "
                            "Diamond|last=Diamond|first= "
                            "Jared|year=2005|title=Collapse. How "
                            "Societies Choose to Fail or "
                            "Succeed|location=New "
                            "York|publisher=Viking|isbn=978-0143036555 "
                            "|title-link=Collapse (book)}}",
                        },
                        {
                            "bare_url_template_found": False,
                            "citation_template_found": False,
                            "citeq_template_found": False,
                            "cs1_template_found": True,
                            "is_citation_reference": False,
                            "is_general_reference": True,
                            "is_named_reference": False,
                            "isbn_template_found": False,
                            "multiple_templates_found": False,
                            "plain_text_in_reference": False,
                            "url_template_found": False,
                            "wikitext": "* {{cite journal|last= "
                            "Fischer|first= Steven Roger|year= "
                            "1995|title= Preliminary Evidence for "
                            "Cosmogonic Texts in Rapanui's "
                            "Rongorongo Inscriptions|journal= "
                            "Journal of the Polynesian Society "
                            "|issue=104|pages=303‚Äì21|url=http://www.jps.auckland.ac.nz/document/Volume_104_199"
                            "5/Volume_104%2C_No._3/Preliminary_evidence_for_cosmogonic_texts_in_Ra"
                            "panui%26apos%3Bs_Rongorongo_inscriptions%2C_by_Steven_Roger_Fischer%2C_"
                            "p_303-322/p1}}",
                        },
                    ],
                    "first_level_domain_counts": [],
                    "links": {
                        "all": 0,
                        "details": [],
                        "other": 0,
                        "s200": 0,
                        "s404": 0,
                        "s5xx": 0,
                    },
                    "types": {
                        "content": {
                            "agg": {
                                "bare_url_t": 0,
                                "citation_t": 0,
                                "citeq_t": {"all": 0},
                                "cs1_t": {
                                    "all": 4,
                                    "book": {
                                        "all": 1,
                                        "has_ia_details_link": 0,
                                        "has_isbn": 1,
                                        "has_wm_link": 0,
                                        "no_link": 1,
                                    },
                                    "journal": {
                                        "all": 1,
                                        "has_doi": 0,
                                        "has_wm_link": 0,
                                        "no_link": 1,
                                    },
                                    "others": 0,
                                    "web": {
                                        "all": 2,
                                        "has_google_books_link": 0,
                                        "has_ia_details_link": 0,
                                        "has_wm_link": 2,
                                        "no_link": 2,
                                    },
                                },
                                "has_hash": 4,
                                "has_template": 4,
                                "isbn_t": 0,
                                "multiple_t": 0,
                                "supported_template_we_prefer": 4,
                                "url_t": 0,
                                "without_a_template": 0,
                            },
                            "citation": {"all": 2},
                            "general": {"all": 2},
                        },
                        "named": 1,
                    },
                },
                "site": "wikipedia",
                "timestamp": 0,
                "timing": 0,
                "title": "Easter Island",
            },
            ArticleStatistics(**self.__make_reproducible__(data=data)).dict(),
        )

    def test_invalid_language(self):
        response = self.test_client.get(
            "/get-statistics?lang=fr&site=wikipedia&title=Test"
        )
        self.assertEqual(response.status_code, 400)
        self.assertEqual(
            response.data, b'"Only en language code is supported"\n'
        )  # expected output

    def test_missing_title(self):
        response = self.test_client.get("/get-statistics?lang=en&site=wikipedia")
        self.assertEqual(response.status_code, 400)
        self.assertEqual(
            response.data,
            b"{\"error\": \"{'title': ['Missing data for required field.']}\"}\n",
        )

    def test_invalid_site(self):
        response = self.test_client.get(
            "/get-statistics?lang=en&site=example.com&title=Test"
        )
        print(response.data)
        self.assertEqual(400, response.status_code)
        self.assertEqual(
            b"{\"error\": \"{'site': ['Must be one of: wikipedia.']}\"}\n",
            response.data,
        )

    def test_site_capitalized(self):
        response = self.test_client.get(
            "/get-statistics?lang=en&site=WIKIPEDIA&title=Test"
        )
        # print(response.data)
        self.assertEqual(400, response.status_code)

    def test_valid_site(self):
        response = self.test_client.get(
            "/get-statistics?lang=en&site=wikipedia&title=Test"
        )
        # print(response.data)
        self.assertEqual(200, response.status_code)

    def __make_reproducible__(self, data):
        """Remove all timing information"""
        # delete non reproducible output
        data["timing"] = 0
        data["timestamp"] = 0
        return data
